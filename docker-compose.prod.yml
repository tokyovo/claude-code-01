# =================================
# Production Docker Compose Configuration
# Personal Finance Tracker - Complete Production Stack
# =================================

version: '3.8'

# =================================
# Services Configuration
# =================================
services:
  # =================================
  # Application Server
  # =================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
    image: finance-tracker-api:${VERSION:-latest}
    container_name: finance_tracker_api_prod
    restart: unless-stopped
    environment:
      # Application Configuration
      - NODE_ENV=production
      - PORT=3000
      - API_VERSION=v1
      - API_PREFIX=/api
      
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-personal_finance_tracker}
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_SSL=false
      - DB_POOL_MIN=5
      - DB_POOL_MAX=30
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_EXPIRES_IN=15m
      - JWT_REFRESH_EXPIRES_IN=7d
      - BCRYPT_ROUNDS=12
      
      # CORS Configuration
      - CORS_ORIGIN=${CORS_ORIGIN:-https://yourdomain.com}
      - CORS_CREDENTIALS=true
      
      # SSL Configuration
      - FORCE_HTTPS=${FORCE_HTTPS:-true}
      - HSTS_MAX_AGE=31536000
      
      # Logging Configuration
      - LOG_LEVEL=warn
      - LOG_HTTP_REQUESTS=false
      - LOG_DATABASE_QUERIES=false
      - LOG_ERROR_STACK_TRACES=true
      
      # Migration Configuration
      - RUN_MIGRATIONS=true
      - RUN_SEEDS=false
      
      # Email Configuration
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
      
      # Monitoring
      - ENABLE_HEALTH_CHECKS=true
      - ENABLE_PERFORMANCE_MONITORING=true
      
      # Feature Flags
      - ENABLE_BUDGET_ALERTS=true
      - ENABLE_CATEGORY_SUGGESTIONS=true
      - ENABLE_RECURRING_TRANSACTIONS=true
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - ./ssl/certs:/app/ssl/certs:ro
    networks:
      - finance_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.finance-api.rule=Host(`api.yourdomain.com`)"
      - "traefik.http.routers.finance-api.tls=true"
      - "traefik.http.routers.finance-api.tls.certresolver=letsencrypt"

  # =================================
  # PostgreSQL Database
  # =================================
  postgres:
    image: postgres:15-alpine
    container_name: finance_tracker_postgres_prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-personal_finance_tracker}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./docker/postgres/config/postgresql.prod.conf:/etc/postgresql/postgresql.conf
      - ./docker/postgres/init/prod:/docker-entrypoint-initdb.d
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries='pg_stat_statements'
      -c log_destination=stderr
      -c logging_collector=on
      -c log_directory=/var/lib/postgresql/data/logs
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c log_statement=none
      -c log_min_duration_statement=1000
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
    networks:
      - finance_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-personal_finance_tracker}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =================================
  # Redis Cache
  # =================================
  redis:
    image: redis:7-alpine
    container_name: finance_tracker_redis_prod
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/config/redis.prod.conf:/usr/local/etc/redis/redis.conf
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    networks:
      - finance_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =================================
  # Nginx Reverse Proxy (Optional)
  # =================================
  nginx:
    image: nginx:alpine
    container_name: finance_tracker_nginx_prod
    restart: unless-stopped
    profiles:
      - with-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl/certs:/etc/ssl/certs:ro
      - ./ssl/dhparam:/etc/ssl/dhparam:ro
      - nginx_logs:/var/log/nginx
    networks:
      - finance_network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================================
  # Database Backup Service
  # =================================
  db-backup:
    image: postgres:15-alpine
    container_name: finance_tracker_backup_prod
    restart: "no"
    profiles:
      - backup
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-personal_finance_tracker}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - postgres_backups:/backups
      - ./docker/scripts/backup.sh:/backup.sh:ro
    command: /backup.sh
    networks:
      - finance_network
    depends_on:
      postgres:
        condition: service_healthy

  # =================================
  # Log Management (Optional)
  # =================================
  log-rotator:
    image: alpine:latest
    container_name: finance_tracker_log_rotator
    restart: "no"
    profiles:
      - log-management
    volumes:
      - app_logs:/app/logs
      - nginx_logs:/nginx/logs
      - ./docker/scripts/rotate-logs.sh:/rotate-logs.sh:ro
    command: /rotate-logs.sh
    networks:
      - finance_network

  # =================================
  # Monitoring (Prometheus - Optional)
  # =================================
  prometheus:
    image: prom/prometheus:latest
    container_name: finance_tracker_prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - finance_network

  # =================================
  # Grafana Dashboard (Optional)
  # =================================
  grafana:
    image: grafana/grafana:latest
    container_name: finance_tracker_grafana
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - finance_network
    depends_on:
      - prometheus

# =================================
# Named Volumes for Persistent Data
# =================================
volumes:
  # Application data
  app_logs:
    driver: local
    name: finance_tracker_app_logs_prod
  app_uploads:
    driver: local
    name: finance_tracker_app_uploads_prod
  
  # Database data
  postgres_data:
    driver: local
    name: finance_tracker_postgres_data_prod
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-./data/postgres}
  
  postgres_backups:
    driver: local
    name: finance_tracker_postgres_backups_prod
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH:-./data/backups}
  
  # Cache data
  redis_data:
    driver: local
    name: finance_tracker_redis_data_prod
  
  # Nginx logs
  nginx_logs:
    driver: local
    name: finance_tracker_nginx_logs_prod
  
  # Monitoring data
  prometheus_data:
    driver: local
    name: finance_tracker_prometheus_data_prod
  
  grafana_data:
    driver: local
    name: finance_tracker_grafana_data_prod

# =================================
# Network Configuration
# =================================
networks:
  finance_network:
    driver: bridge
    name: finance_tracker_network_prod
    ipam:
      config:
        - subnet: 172.20.0.0/16